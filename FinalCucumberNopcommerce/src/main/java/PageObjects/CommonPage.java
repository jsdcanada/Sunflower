package PageObjects;

import FinalCucumberTrial.LoadProp;
import FinalCucumberTrial.Utils;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.testng.asserts.SoftAssert;

import java.util.List;

public class CommonPage extends Utils {

    private By _emailFriend = By.xpath("//input[contains (@class, \"button-2 email-a-friend-button\")and contains(@value, \"Email a friend\")]");
    private By _friendEmail = By.id("FriendEmail");
    private By _yourEmail = By.id("YourEmailAddress");
    private By _personalMessage = By.id("PersonalMessage");
    private By _sendEmailButton = By.xpath("//input[contains (@class, \"button-1 send-email-a-friend-button\")and contains(@name, \"send-email\")]");
    private By _pageTitle = By.className("page-title");
    private By _sortByFilter = By.id("products-orderby");
    private By _displayFilter = By.id("products-pagesize");
    private By _nameAtoZSortbyFilter = By.xpath("//select[@id=\"products-orderby\"]/option[2]");
    private By _nameZtoASortbyFilter = By.xpath("//select[@id=\"products-orderby\"]/option[3]");
    private By _priceLowToHighSortbyFilter = By.xpath("//select[@id=\"products-orderby\"]/option[4]");
    private By _priceHighToLowSortbyFilter = By.xpath("//select[@id=\"products-orderby\"]/option[5]");
    private By _createdOnSortbyFilter = By.xpath("//select[@id=\"products-orderby\"]/option[6]");

    private By _3inDisplayFilter = By.xpath("//select[@id=\"products-pagesize\"]/option[1]");
    private By _6inDisplayFilter = By.xpath("//select[@id=\"products-pagesize\"]/option[2]");
    private By _9inDisplayFilter = By.xpath("//select[@id=\"products-pagesize\"]/option[3]");

    private By _productsElements = By.xpath("//div[@class=\"item-grid\"]/div/div/div[2]/h2/a");

    SoftAssert softAssertObj = new SoftAssert();
    LoadProp loadProp = new LoadProp();
    StringBuilder stringBuilder = new StringBuilder();
    StringBuilder storage = new StringBuilder();

    String actualString;
    public String termsOfFilterOnBooksPage, sortByDropdownListText, option;


    public void clickEmailAFriend() {
        scrollPage(0, 850);

        //click on Email a Friend
        myClick(_emailFriend);

        //Soft assert
        actualString = getText(_pageTitle);
        softAssertObj.assertEquals(actualString, "Email a friend", "Email a friend page is not loaded");
        softAssertObj.assertAll();
    }

    public void fillEmailAFriendFields() {
        //click on frind email field and insert email ID
        myEnterText(_friendEmail, loadProp.getProperty("friendEmail"));

        //click on your email. Clear text and enter email ID generated by randomnumber
        clearText(_yourEmail);
        randomNumber(_yourEmail, loadProp.getProperty("firstName"));

        //click on personal message and write message to friend
        myEnterText(_personalMessage, "Hi Bhagirath. Check this out. You should really buy this desktop. It is amazing.");
        softAssertObj.assertAll();
    }

    public void clickSendEmailButton(){

        scrollPage(0, 250);
        //click on send email button
        myClick(_sendEmailButton);


    }

    //this method will return a String containing texts of option of filter
    public String clickOnFilterOnBookPage(String filter) {

        if (filter.contains("Sort by")) {
            //click on sort by filter
            myClick(_sortByFilter);

            //store all elements of sort by filter list
            List<WebElement> elements = driver.findElements(_sortByFilter);

            //get text of sort by filter list and store in storage
            for (WebElement e: elements) {
                storage.append(e.getText());
            }
            //remove all space(before it was in in different lines) and make it in one line
            //convert into String
            String storage1 = storage.toString().replaceAll("\\s","");

            //separate each string by adding comma and single space
            for(int i = 0 ; i < storage1.length(); i++)
            {
                stringBuilder = stringBuilder.append(storage1.charAt(i));
                if(i == 7 || i==16 || i==25|| i==40 || i==55) {
                    stringBuilder = stringBuilder.append(", ");
                }
                if(i == 12 || i==13 || i == 15 || i==21 || i==22 || i==24 || i==31 || i==34 || i==36|| i==46|| i==50 || i==52 || i==62) {
                    stringBuilder = stringBuilder.append(" ");
                }
            }

        } else if (filter.contains("Display")) {
            //click on display filter
            myClick(_displayFilter);

            //store all elements of display filter list
            List<WebElement> elements = driver.findElements(_displayFilter);

            //get text of display filter list and store in storage
            for (WebElement e: elements) {
                storage.append(e.getText());
            }

            //remove all space(before it was in in different lines) and make it in one line
            //convert into String
            String storage1 = storage.toString().replaceAll("\\s","");

            //separate each string by adding comma and single space
            for(int i = 0 ; i < storage1.length(); i++)
            {
                stringBuilder = stringBuilder.append(storage1.charAt(i));
                if(i == 0 || i==1) {
                    stringBuilder = stringBuilder.append(", ");
                }
            }
        }
        return termsOfFilterOnBooksPage = stringBuilder.toString();
    }

    //click on filter
    public void clickOnSortbyOrDisplayFilterOnBooksPage(String filter){
        if(filter.contains("Sortby")){
            myClick(_sortByFilter);
        }else if(filter.contains("Display")){
            myClick(_displayFilter);
        }
    }

    //this method will return a String containing texts of option of filter exactly same as we can see in website
    public String clickOnSortByFilterAndGetTextOfOptionInDropDownList() {

        List<WebElement> elements = driver.findElements(_sortByFilter);

        for (WebElement e : elements) {
            storage.append(e.getText());
        }
        sortByDropdownListText = storage.toString();
        return sortByDropdownListText;

    }


    public void selectOptionFromSortbyFilter(String option){

        if(option.contains("Name: A to Z")) {
            myClick(_nameAtoZSortbyFilter);
        }else if(option.contains("Name: Z to A")) {
            myClick(_nameZtoASortbyFilter);
        }else if(option.contains("Price: Low to High")) {
            myClick(_priceLowToHighSortbyFilter );
        }else if(option.contains("Price: High to Low")) {
            myClick(_priceHighToLowSortbyFilter );
        }else if(option.contains("Created on")) {
            myClick(_createdOnSortbyFilter );
        }
    }

    public void selectOptionFromDisplayFilter(String option){
        if(option.contains("3")) {
            myClick(_3inDisplayFilter);
        }else if(option.contains("6")) {
            myClick(_6inDisplayFilter);
        }else if (option.contains("9")) {
                myClick(_9inDisplayFilter);}
    }

    public int userShouldSeeNotMoreThanSelectedOptionProducts(int option){
        List<WebElement> booksElements = driver.findElements(_productsElements);

        for (WebElement e: booksElements) {
            storage.append(e.getText().charAt(0));
        }
        String noOfProductsOnPage = storage.toString();
        if(noOfProductsOnPage.length()<= option);

        return option;
    }
}
